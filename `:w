<script lang="ts">
  import { onMount } from "svelte";
  let canvas: HTMLCanvasElement = document.querySelector("#canvas")!;
  let rainbows: HTMLCanvasElement = document.querySelector("#rainbows")!;
  const blue = "rgba(0,0,255,1)";
  let context2D: CanvasRenderingContext2D;
  let rainbows2D: CanvasRenderingContext2D;
  function drawRainbows() {
    const width = rainbows2D.canvas.width;
    const height = rainbows2D.canvas.height;
    for (let i = 0; i < height; i++) {
      const hue = (i / height) * 360;
      rainbows2D.fillStyle = `hsl(${hue}, 100%, 50%)`;
      rainbows2D.fillRect(0, i, width, 1);
    }
  }
  function drawCanvas() {
    let HorizontalGradient = context2D.createLinearGradient(
      0,
      0,
      context2D.canvas.width,
      0,
    );
    HorizontalGradient.addColorStop(0, "#fff");
    HorizontalGradient.addColorStop(1, blue);
    context2D.fillStyle = HorizontalGradient;
    context2D.fillRect(0, 0, context2D.canvas.width, context2D.canvas.height);

    let VeritalGradient = context2D.createLinearGradient(0, 0, 0, 300);
    VeritalGradient.addColorStop(0, "rgba(0, 0, 0, 0)");
    VeritalGradient.addColorStop(1, "#000");
    context2D.fillStyle = VeritalGradient;
    context2D.fillRect(0, 0, context2D.canvas.width, context2D.canvas.height);
  }
  onMount(() => {
    context2D = canvas.getContext("2d")!;
    rainbows2D = rainbows.getContext("2d")!;
    drawCanvas();
    drawRainbows();
  });
  let pixel;

  function clickEvent(
    e: MouseEvent & { currentTarget: EventTarget & HTMLCanvasElement },
  ) {
    let rect = canvas.getBoundingClientRect();
    let x = e.clientX - rect.left;
    let y = e.clientY - rect.top;
    drawCanvas();
    pixel = context2D.getImageData(x, y, 1, 1).data;
    drawMarker(x, y);
  }
  function drawMarker(x: number, y: number) {
    context2D.strokeStyle = "white";
    context2D.lineWidth = 2;
    context2D.beginPath();
    context2D.arc(x, y, 5, 0, 2 * Math.PI);
    context2D.stroke();
  }
  function mouseEventRainbows(
    e: MouseEvent & { currentTarget: EventTarget & HTMLCanvasElement },
  ) {
    let rect = canvas.getBoundingClientRect();
    let x = e.clientX - rect.left;
    let y = e.clientY - rect.top;
    drawRainbows();
    pixel = context2D.getImageData(x, y, 1, 1).data;
    drawMarker(x, y);
    console.log(pixel);
  }
</script>

<div class="flex flex-row bg-red-300">
  <div class="">
    <p>first</p>
    <canvas
      height="200"
      width="200"
      id="canvas"
      class=""
      bind:this={canvas}
      on:click={clickEvent}
    >
    </canvas>
  </div>
  <div>
    <p>Second Canvas</p>
    <canvas
      width="30"
      height="200"
      id="rainbows"
      class="border-black border-2 rounded-md"
      bind:this={rainbows}
      on:mousemove={mouseEventRainbows}
    ></canvas>
  </div>
  <div class="">
    <input type="text" value="#0000" class="border border-black text-center" />
    <span class=""> copy </span>
  </div>
</div>
